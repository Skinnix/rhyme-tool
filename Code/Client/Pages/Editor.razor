@page "/editor"
@page "/chords/editor"

@using Skinnix.RhymeTool.Client.Components.Configuration
@using Skinnix.RhymeTool.Client.Components.Rendering
@using Skinnix.RhymeTool.Client.Services
@using Skinnix.RhymeTool.ComponentModel
@using Skinnix.RhymeTool.Data.Notation
@using Skinnix.RhymeTool.Data.Notation.Display
@using Skinnix.RhymeTool.Client.Components.Editing
@using Skinnix.RhymeTool.Rhyming

@layout RendererLayout

@inject IJSRuntime js
@inject IDocumentService documentService
@inject NavigationManager navigation

<SectionContent SectionName="NavbarMain">
    <a class="btn btn-dark" href="javascript:history.back()">
        <i class="fas fa-arrow-left"></i>
    </a>

    <div class="navbar-brand me-auto text-truncate">
        @document?.Label
    </div>

    @if (document is not null && documentSource is not null && documentSource.CanSave)
    {
        <button class="btn btn-primary" type="button" @onclick="SaveDocument">
            <i class="fa-solid fa-floppy-disk"></i>
        </button>
    }

    <button class="navbar-toggler d-lg-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#sideMenu" aria-controls="sideMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</SectionContent>

<SectionContent SectionName="SideMenuHeader">
    <h5 class="offcanvas-title" id="offcanvasResponsiveLabel">@document?.Label</h5>
</SectionContent>

<SectionContent SectionName="SideMenu">
    @if (document is not null)
    {
        <h4>Tools</h4>
        <ConfigurationGrid Settings="settings" />

        <div class="mx-1 my-3 d-grid gap-2">
            <button class="btn btn-secondary text-truncate mt-2" role="button" data-bs-toggle="modal" data-bs-target="#rhymeDialog">
                Reime
            </button>
        </div>

        <h4>Navigation</h4>
        <nav class="nav nav-pills flex-column overflow-x-hidden text-break" id="pageNavigation">
            @foreach (var segment in document.FindSegments())
            {
                var url = $"{new Uri(navigation.Uri).GetLeftPart(UriPartial.Query)}#sheetSegment-{segment.TitleLine.Guid}";
                <a class="nav-link" href="@url" onclick="location.replace('@url'); return false">
                    @segment.Title
                </a>
            }
        </nav>
    }
</SectionContent>

<div class="chord-sheet-wrapper@(IsDebug ? " debug" : null)" style="--font-percent: @settings.FontSize;">
    <SheetEditor Document="document" Formatter="settings.Formatter" />
</div>

<div class="modal" tabindex="-1" id="rhymeDialog">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reimsuche</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <Skinnix.RhymeTool.Client.Components.Rhyming.TermSearch />
            </div>
        </div>
    </div>
</div>


@code {
    private static readonly bool IsDebug =
#if DEBUG
    true;
#else
        false;
#endif

    [Parameter, SupplyParameterFromQuery] public string? Doc { get; set; }

    public static string GetUrl(IDocumentSource document) => GetUrl(document.Id);
    public static string GetUrl(string? documentId) => documentId is null ? "/chords/editor" : "/chords/editor?doc=" + Uri.EscapeDataString(documentId);

    private IDocumentSource? documentSource;
    private SheetDocument? document;

    private EditingSettings settings = new()
    {
        FontSize = 100,
        Formatter = new DefaultSheetFormatter()
        {
            GermanMode = GermanNoteMode.Descriptive,
            ExtendAttachmentLines = true,
            //CondenseTabNotes = false,
        },
    };

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        settings.PropertyChanged += (_, _) => StateHasChanged();

        documentSource = await documentService.TryGetDocument(Doc);
        if (documentSource is not null)
        {
            if (document is not null)
            {
                document.Lines.Modified -= OnDocumentLinesModified;
                document.TitlesChanged -= OnDocumentTitlesChanged;
            }
            document = await documentSource.LoadAsync();
            if (document is not null)
            {
                document.Lines.Modified += OnDocumentLinesModified;
                document.TitlesChanged += OnDocumentTitlesChanged;
            }
        }

        if (document is null)
        {
            document = new SheetDocument(new SheetEmptyLine());
            document.Lines.Modified += OnDocumentLinesModified;
            document.TitlesChanged += OnDocumentTitlesChanged;
        }

        //document.Lines.Add(new SheetTabLine());
    }

    private void OnDocumentTitlesChanged(object? sender, EventArgs e)
        => StateHasChanged();

    private void OnDocumentLinesModified(object? sender, ModifiedEventArgs e)
        => StateHasChanged();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            //await js.InvokeVoidAsync("startScrollSpy", "pageNavigation");
        }
    }

    private async Task SaveDocument()
    {
        if (document is null || documentSource is null)
            return;

        await documentSource.SaveAsync(document);
    }
}