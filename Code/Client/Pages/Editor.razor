@page "/editor"
@page "/chords/editor"

@using Skinnix.RhymeTool.Client.Components.Configuration
@using Skinnix.RhymeTool.Client.Components.Rendering
@using Skinnix.RhymeTool.Client.Services
@using Skinnix.RhymeTool.Data.Notation
@using Skinnix.RhymeTool.Data.Notation.Display
@using Skinnix.RhymeTool.Client.Components.Editing

@layout MainLayout

@inject IJSRuntime js
@inject WorkSession session
@inject NavigationManager navigation

<SectionContent SectionName="NavbarMain">
    <button class="navbar-toggler d-lg-none" type="button" data-bs-toggle="offcanvas" data-bs-target="#rendererMenu" aria-controls="rendererMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</SectionContent>

<div class="col sheet-wrapper" style="font-size: @(settings.FontSize)px;">
    <SheetEditor Document="session.CurrentDocument?.Document" Formatter="settings.Formatter" />
</div>

<aside class="col-2 offcanvas-lg offcanvas-end d-flex" data-bs-scroll="true" id="rendererMenu">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasResponsiveLabel">@session.CurrentDocument?.Document?.Label</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" data-bs-target="#rendererMenu" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body flex-column">
        <div class="sticky-lg-top">
            @if (session.CurrentDocument?.Document != null)
            {
                <h4>Tools</h4>
                <ConfigurationGrid Settings="settings" />

                <h4>Navigation</h4>
                <nav class="nav nav-pills flex-column" id="pageNavigation">
                    @foreach (var segment in session.CurrentDocument.Document.FindSegments())
                    {
                        <a class="nav-link" href="@(navigation.Uri)#sheetSegment-@(segment.TitleLine.Guid)">
                            @segment.Title
                        </a>
                    }
                </nav>
            }
        </div>
    </div>
</aside>

@code {
    private EditingSettings settings = new()
    {
        FontSize = 16,
        Formatter = new DefaultSheetFormatter()
        {
            GermanMode = GermanNoteMode.Descriptive,
        },
    };

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        settings.PropertyChanged += (_, _) => StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        await js.InvokeVoidAsync("console.log", "rerender: " + this.GetType().Name);
    }
}