@page "/"
@page "/chords"

@layout FullscreenLayout

@using Skinnix.RhymeTool.Client.Components.Files
@using Skinnix.RhymeTool.Client.Components.Rendering
@using Skinnix.RhymeTool.Client.Services
@using Skinnix.RhymeTool.Client.Services.Files
@using Skinnix.RhymeTool.Client.Updating
@using Skinnix.RhymeTool.Data.Notation
@using Skinnix.RhymeTool.Data.Notation.Display

@inject IDocumentFileService fileService
@inject IDocumentService documentService
@inject IDialogService dialogService
@inject NavigationManager navigation
@inject IUpdateService updateService

<PageTitle>Index</PageTitle>

<SectionContent SectionName="NavbarMain">
    <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#mainMenu" aria-controls="mainMenu">
        <i class="fa-solid fa-bars"></i>
    </button>

    <div class="navbar-brand me-auto">
        Akkorde
    </div>

    @if (updateResult is not null)
    {
        if (!updateResult.CheckSuccess)
        {
            <button class="btn btn-outline-light fa-solid fa-cloud-arrow-down position-relative" title="@updateResult.ErrorMessage" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="@updateResult.ErrorMessage"
                    @onclick="@(_ => dialogService.ShowErrorAsync(updateResult.ErrorMessage, "Update"))">
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger fa-solid fa-triangle-exclamation">
                    <span class="visually-hidden">@updateResult.ErrorMessage</span>
                </span>
            </button>
        }
        else if (updateResult.IsUpdateAvailable)
        {
            <button class="btn btn-outline-light fa-solid fa-cloud-arrow-down" title="Update verfügbar" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Update verfügbar" @onclick="updateResult.Download.StartDownload">
            </button>
        }
    }
</SectionContent>

<aside class="offcanvas offcanvas-start d-flex" data-bs-scroll="true" id="mainMenu">
    <div class="offcanvas-header">
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" data-bs-target="#mainMenu" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body d-flex flex-column">
        <div class="list-group flex-fill d-table">
            @if (updateService.IsDownloadAvailable)
            {
                <button class="list-group-item list-group-item-action d-table-row" @onclick="() => navigation.NavigateTo(Downloads.GetUrl())">
                    <span class="d-table-cell">
                        <i class="fa-solid fa-download"></i>&nbsp;
                    </span>
                    <span class="d-table-cell">
                        Download
                    </span>
                </button>
            }

            <button class="list-group-item list-group-item-action d-table-row" @onclick="() => navigation.NavigateTo(Preferences.GetUrl())">
                <span class="d-table-cell">
                    <i class="fa-solid fa-gear"></i>&nbsp;
                </span>
                <span class="d-table-cell">
                    Einstellungen
                </span>
            </button>
        </div>

        @if (updateService.CurrentVersionString is not null)
        {
            <div class="d-block text-end" title="@updateService.CurrentVersion">@updateService.CurrentVersionString</div>
        }
    </div>
</aside>

@if (fileService.CanOpenDroppedFile)
{
    <label class="dropzone dropzone-overlay">
        <span class="dropzone-overlay-background"></span>

        <span class="dropzone-overlay-content d-flex flex-column align-items-center">
            <span class="dropzone-overlay-icon fs-1">
                <i class="fas fa-file-import"></i>
            </span>

            <span class="dropzone-overlay-text">
                <span>Droppe eine Datei hier, um sie zu öffnen.</span>
            </span>
        </span>

        <InputFile OnChange="OpenDroppedFile" id="openFileInput" />
    </label>
}

@if (fileService.CanSelectFile)
{
    <button class="btn btn-secondary d-block w-100 mb-3" role="button" @onclick="SelectFile">
        <i class="fas fa-file-import"></i> Datei öffnen
    </button>
}
else if (fileService.CanUploadFile && fileList is null)
{
    <button class="btn btn-secondary d-block w-100 mb-3" role="button" onclick="document.getElementById('openFileInput').click()">
        <i class="fas fa-file-import"></i> Datei öffnen
    </button>
}

@if (fileList is not null)
{
    <div class="mb-3 fullscreen-fill">
        <FileSelector Files="fileList" OnOpenFile="OpenSelectedFile" />
    </div>
}
else if (shouldSelectWorkingDirectory)
{
    <div class="row mb-3">
        <div class="col-sm-6">
            <label for="selectWorkingDirectory" class="text-danger me-auto">
                <i class="fa-solid fa-triangle-exclamation"></i>
                <span>Es wurde noch kein Arbeitsordner ausgewählt.</span>
            </label>
        </div>

        <div class="col-sm-6">
            <button class="btn btn-primary d-block w-100" @onclick="SelectWorkingDirectory">
                @if (waitingForDirectoryPermission)
                {
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>Bestätigen und auswählen</span>
                }
                else
                {
                    <i class="fas fa-folder-open"></i>
                    <span>Arbeitsordner auswählen</span>
                }
            </button>
        </div>
    </div>
}

@if (isDebug) 
{
    <div class="row mb-3">
        <div class="col">
            <a class="btn btn-primary d-block w-100" href="/chords/renderer">
                Testdokument
            </a>
        </div>
    </div>
}

@code {
    private IFileList? fileList;

    private bool waitingForDirectoryPermission;
    private bool shouldSelectWorkingDirectory;

    private IUpdateService.ICheckUpdateResult? updateResult;

    private bool isDebug = 
#if DEBUG
    true;
#else
        false;
#endif

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        fileList = null;
        waitingForDirectoryPermission = false;
        shouldSelectWorkingDirectory = false;
        if (fileService.CanListFiles)
        {
            var fileListResult = await fileService.TryGetFileListAsync();
            if (fileListResult.Value is not null)
            {
                fileList = fileListResult.Value;
            }
            else if (fileService.CanSelectWorkingDirectory)
            {
                var workingDirectoryResult = await fileService.TryGetWorkingDirectoryAsync();
                if (workingDirectoryResult.Value is null)
                    shouldSelectWorkingDirectory = true;
            }

            StateHasChanged();
        }

        if (updateService.IsUpdateAvailable)
            _ = CheckForUpdates();
    }

    private async Task SelectWorkingDirectory()
    {
        //Wähle Arbeitsordner
        var workingDirectoryResult = await fileService.TrySelectWorkingDirectoryAsync();

        //Ok?
        if (workingDirectoryResult.IsOk && workingDirectoryResult.Value is not null)
        {
            shouldSelectWorkingDirectory = false;
            StateHasChanged();

            //Lade Dateiliste
            var fileListResult = await fileService.TryGetFileListAsync();
            if (fileListResult.Value is not null)
            {
                fileList = fileListResult.Value;
                StateHasChanged();
                return;
            }

            shouldSelectWorkingDirectory = true;
            StateHasChanged();

            await dialogService.ShowErrorAsync("Fehler beim Laden der Dateien", "Fehler");
            return;
        }

        //Abgebrochen?
        if (workingDirectoryResult.Result == SystemRequestResultType.Denied)
        {
            if (!waitingForDirectoryPermission)
                return;

            waitingForDirectoryPermission = false;
            StateHasChanged();
            return;
        }

        //Warte auf Berechtigung?
        if (workingDirectoryResult.IsPending)
        {
            waitingForDirectoryPermission = true;
            StateHasChanged();
            return;
        }

        //Fehler?
        if (workingDirectoryResult.IsError)
        {
            await dialogService.ShowErrorAsync("Fehler beim Auswählen des Arbeitsordners", "Fehler");
            return;
        }

        //Keine Berechtigung?
        if (workingDirectoryResult.Result.HasFlag(SystemRequestResultType.NeededFlag))
        {
            await dialogService.ShowErrorAsync("Die Berechtigung zum Zugriff auf das Dateisystem ist erforderlich.", "Fehler");
            return;
        }

        await dialogService.ShowErrorAsync("Auswählen des Arbeitsordners fehlgeschlagen", "Fehler");
    }

    private async Task SelectFile()
    {
        //Wähle Datei
        var fileResult = await fileService.TrySelectFileAsync();

        //Fehler?
        if (fileResult.IsError)
        {
            await dialogService.ShowErrorAsync("Fehler beim Auswählen der Datei", "Fehler");
            return;
        }

        //Warte auf Berechtigung?
        if (fileResult.IsPending)
            return;

        //Abgebrochen?
        if (fileResult.Result == SystemRequestResultType.Denied || fileResult.Value is null)
            return;

        //Öffne Datei
        await OpenFile(fileResult.Value);
    }

    private async Task OpenDroppedFile(InputFileChangeEventArgs e)
    {
        if (e.File is null)
            return;

        //Lade Datei
        var content = await fileService.OpenSelectedFileAsync(e.File);

        //Öffne Datei
        await OpenFile(content.Value);
    }

    private async Task OpenSelectedFile(IFileListFile file)
    {
        //Öffne Datei
        await OpenFile(await file.GetContentAsync());
    }

    private async Task OpenFile(IFileContent? content)
    {
        //Prüfe, ob Datei geöffnet werden kann
        if (content is null || !content.CanRead)
        {
            await dialogService.ShowErrorAsync("Die Datei konnte nicht geöffnet werden.", "Fehler");
            return;
        }

        //Lade Datei
        var documentSource = await documentService.LoadFile(content);

        //Setze als aktuelles Dokument
        documentService.SetCurrentDocument(documentSource);

        //Zeige an
        navigation.NavigateTo(Renderer.GetUrl(documentSource));
    }

    private async Task CheckForUpdates()
    {
        updateResult = null;
        updateResult = await updateService.CheckUpdatesAsync();
        StateHasChanged();
    }
}