@page "/preferences"
@page "/chords/preferences"

@using Skinnix.RhymeTool.Client.Services
@using Skinnix.RhymeTool.Client.Services.Files
@using Skinnix.RhymeTool.Client.Services.Preferences

@layout FullscreenLayout

@inject IDocumentFileService fileService
@inject IPreferencesService preferencesService
@inject IDialogService dialogService

<SectionContent SectionName="NavbarMain">
    <a class="btn btn-dark" href="/chords">
        <i class="fas fa-arrow-left"></i>
    </a>

    <div class="me-auto">
        Einstellungen
    </div>
</SectionContent>

@if (fileService.CanSelectWorkingDirectory)
{
    <h2>Ordner</h2>
    <div class="row mb-3">
        <div class="col">
            @if (workingDirectoryError)
            {
                <text>Es ist ein Fehler aufgetreten.</text>
            }
            else if (waitingForDirectoryPermission)
            {
                <text>Zum Bestätigen der Berechtigung bitte erneut klicken.</text>
            }
            else if (currentWorkingDirectory is not null)
            {
                <text>Das aktuelle Arbeitsverzeichnis ist:</text>
                <div class="ms-3 text-body-secondary">@currentWorkingDirectory</div>
            }
            else
            {
                <text>Es wurde kein Arbeitsverzeichnis ausgewählt.</text>
            }
        </div>

        <div class="col-sm-4 col-md-3 col-lg-2 d-flex align-items-center">
            <button type="button" class="btn btn-secondary d-block w-100 my-2" @onclick="SelectWorkingDirectory">
                @if (waitingForDirectoryPermission)
                {
                    <text>Bestätigen</text>
                }
                else if (currentWorkingDirectory is not null)
                {
                    <text>Ändern</text>
                }
                else
                {
                    <text>Auswählen</text>
                }
            </button>
        </div>
    </div>
}

<h2>Daten löschen</h2>
<button type="button" class="btn btn-danger d-block w-100" @onclick="DeleteAllPreferences">
    Alle Einstellungen löschen
</button>

@code {
    public static string GetUrl() => "/chords/preferences";

    private string? currentWorkingDirectory;
    private bool workingDirectoryError;
    private bool shouldGetWorkingDirectoryPermission;
    private bool waitingForDirectoryPermission;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        currentWorkingDirectory = null;
        shouldGetWorkingDirectoryPermission = false;
        waitingForDirectoryPermission = false;
        workingDirectoryError = false;
        if (fileService.CanSelectWorkingDirectory)
        {
            var workingDirectoryResult = await fileService.TryGetWorkingDirectoryAsync();

            if (workingDirectoryResult.Result == SystemRequestResultType.Nonexisting)
            {
                shouldGetWorkingDirectoryPermission = true;
                StateHasChanged();
                return;
            }

            if (workingDirectoryResult.IsPending)
            {
                waitingForDirectoryPermission = true;
                StateHasChanged();
                return;
            }

            if (workingDirectoryResult.IsOk)
            {
                currentWorkingDirectory = workingDirectoryResult.Value;
                StateHasChanged();
                return;
            }

            if (workingDirectoryResult.IsError)
            {
                workingDirectoryError = true;
                StateHasChanged();
                return;
            }
        }
    }

    private async Task SelectWorkingDirectory()
    {
        //Wähle Arbeitsordner
        var workingDirectoryResult = await fileService.TrySelectWorkingDirectoryAsync();

        //Ok?
        if (workingDirectoryResult.IsOk && workingDirectoryResult.Value is not null)
        {
            currentWorkingDirectory = workingDirectoryResult.Value;
            StateHasChanged();
            return;
        }

        //Abgebrochen?
        if (workingDirectoryResult.Result == SystemRequestResultType.Denied)
        {
            if (!waitingForDirectoryPermission)
                return;

            waitingForDirectoryPermission = false;
            StateHasChanged();
            return;
        }

        //Warte auf Berechtigung?
        if (workingDirectoryResult.IsPending)
        {
            waitingForDirectoryPermission = true;
            StateHasChanged();
            return;
        }

        //Fehler?
        if (workingDirectoryResult.IsError)
        {
            await dialogService.ShowErrorAsync("Fehler beim Auswählen des Arbeitsordners", "Fehler");
            return;
        }

        //Keine Berechtigung?
        if (workingDirectoryResult.Result.HasFlag(SystemRequestResultType.NeededFlag))
        {
            await dialogService.ShowErrorAsync("Die Berechtigung zum Zugriff auf das Dateisystem ist erforderlich.", "Fehler");
            return;
        }

        await dialogService.ShowErrorAsync("Auswählen des Arbeitsordners fehlgeschlagen", "Fehler");
    }

    private async Task DeleteAllPreferences()
    {
        if (!await dialogService.ConfirmAsync("Möchten Sie wirklich alle Einstellungen löschen?", "Daten löschen?"))
            return;

        preferencesService.Clear();
        currentWorkingDirectory = null;
        StateHasChanged();
    }
}
