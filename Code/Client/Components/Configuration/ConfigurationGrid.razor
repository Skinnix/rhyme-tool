@using Microsoft.AspNetCore.Components.Rendering
@using Skinnix.RhymeTool.Configuration
@using System.ComponentModel

<div class="mx-1">
    @{
        var i = 0;
    }
    @foreach (var property in Settings?.Properties ?? [])
    {
        @CreateRenderer(property, $"{guid}-{i++}")
    }
</div>


@code {
    [Parameter] public IConfigurable? Settings { get; set; }

    private readonly Guid guid = Guid.NewGuid();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (Settings is not null)
            Settings.PropertyChanged -= OnSettingsPropertyChanged;

        await base.SetParametersAsync(parameters);

        if (Settings is not null)
            Settings.PropertyChanged += OnSettingsPropertyChanged;
    }

    private void OnSettingsPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        
    }

    private RenderFragment CreateRenderer(IConfigurableProperty property, string editorId)
    {
        var componentType = property.Type == typeof(int) ? typeof(IntEditor)
            : property.Type == typeof(bool) ? typeof(BoolEditor)
            : null;

        if (componentType is null)
            return EmptyEditor;

        return builder =>
        {
            builder.OpenComponent(0, componentType);
            builder.AddAttribute(1, "Property", property);
            builder.AddAttribute(2, "EditorId", editorId);
            builder.CloseComponent();
        };
    }

    private static void EmptyEditor(RenderTreeBuilder _) { }
}
