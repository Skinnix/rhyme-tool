@using Microsoft.AspNetCore.Components.Rendering
@using Skinnix.RhymeTool.Configuration
@using System.ComponentModel

@{
    var i = 0;
}
@foreach (var property in Settings?.Properties ?? [])
{
    i++;

    <div class="row mb-3">
        <label class="form-label">
            @if (property.IsToggleable)
            {
                <button class="btn btn-sm rounded" data-bs-toggle="collapse" data-bs-target="#property@(guid)-@(i)">
                    <i class="fas fa-toggle-off"></i>
                </button>
            }

            @property.Name
        </label>
        <div class="col collapse show" id="property@(guid)-@(i)">
            @CreateRenderer(property)
        </div>
    </div>
}


@code {
    [Parameter] public IConfigurable? Settings { get; set; }

    private readonly Guid guid = Guid.NewGuid();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (Settings is not null)
            Settings.PropertyChanged -= OnSettingsPropertyChanged;

        await base.SetParametersAsync(parameters);

        if (Settings is not null)
            Settings.PropertyChanged += OnSettingsPropertyChanged;
    }

    private void OnSettingsPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        
    }

    private RenderFragment CreateRenderer(IConfigurableProperty property)
    {
        var componentType =
            property.Type == typeof(int) ? typeof(IntEditor)
            : null;

        if (componentType is null)
            return EmptyEditor;

        return builder =>
        {
            builder.OpenComponent(0, componentType);
            builder.AddAttribute(1, "Property", property);
            builder.CloseComponent();
        };
    }

    private static void EmptyEditor(RenderTreeBuilder _) { }
}
