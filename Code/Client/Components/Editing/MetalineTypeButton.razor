@using Skinnix.RhymeTool.Data.Notation
@using Skinnix.RhymeTool.Data.Notation.Display

@inject IJSRuntime js

<span class="dropdown line-type" @ref="dropdownWrapper">
    <a class="btn btn-tiny btn-outline-secondary dropdown-toggle" href="javascript:void(0)" data-bs-toggle="dropdown" aria-expanded="false">
        @switch (Line)
        {
            case SheetVarietyLine _:
                <i class="fa-solid fa-ellipsis"></i>
                break;
            default:
                <i class="fa-solid fa-ellipsis"></i>
                break;
        }
    </a><span class="dropdown-menu">
        @if (expanded && Document is not null && Line is not null)
        {
            foreach (var conversion in Line.GetPossibleConversions())
            {
                <button class="dropdown-item" onclick="@(() => conversion.Execute(Document, Line))">@(
                    conversion.Type == SheetEmptyLine.LineType ? SheetVarietyLine.LineType.Label : conversion.Type.Label
                )</button>
            }
        }
     </span>
</span>

@code {
    [CascadingParameter] public SheetDocument? Document { get; set; }

    [Parameter] public SheetLine? Line { get; set; }

    private bool expanded;

    private ElementReference dropdownWrapper;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await js.InvokeVoidAsync("registerDropDownHandler", dropdownWrapper, DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void OnDropDownShow()
    {
        expanded = true;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnDropDownHidden()
    {
        expanded = false;
        StateHasChanged();
    }
}