@namespace Skinnix.RhymeTool.Client.Components.Editing

@using Skinnix.RhymeTool.Data.Notation
@using Skinnix.RhymeTool.Data.Notation.Display

@inject IJSRuntime js

<div class="chord-sheet chord-sheet-editor chord-sheet-editing" contenteditable @ref="editorWrapper">
    @if (Document != null)
    {
        var segmentIndex = 0;

        <CascadingValue TValue="ISheetFormatter" Value="Formatter">
            <CascadingValue TValue="SheetDocument" Value="Document">

                @foreach (var segment in Document.Segments)
                {
                    <CascadingValue TValue="SheetSegment" Value="segment">

                        <div class="segment" id="sheetSegment@(segmentIndex++)">
                            @if (segment.Title != null)
                            {
                                <div class="segment-title">
                                    <span class="segment-title-brackets">[</span>@segment.Title<span class="segment-title-brackets">]</span>
                                </div>
                            }

                            @foreach (var line in segment.Lines)
                            {
                                <SheetEditorLine Line="line" @ref="lineEditorsSetter" />
                            }
                        </div>

                    </CascadingValue>
                }

            </CascadingValue>
        </CascadingValue>
    }
</div>

@code {
    [Parameter] public SheetDocument? Document { get; set; }
    [Parameter] public ISheetFormatter? Formatter { get; set; }

    private ElementReference editorWrapper;

    private readonly WeakDictionary<Guid, SheetEditorLine> lineEditors = new();
    private SheetEditorLine lineEditorsSetter
    {
        set
        {
            if (value.Line != null)
                lineEditors[value.Line.Guid] = value;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            js.InvokeVoidAsync("registerBeforeInput", editorWrapper, DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable("OnBeforeInput")]
    public void OnBeforeInput(InputEventData data)
    {
        var startEditor = lineEditors[data.Selection.Start.Metaline];
        if (data.Selection.End.Metaline != data.Selection.Start.Metaline)
        {
            return; //TODO: for now, we don't support multi-line selections
        };

        startEditor.HandleInput(data);
    }
}