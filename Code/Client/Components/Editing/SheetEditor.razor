@namespace Skinnix.RhymeTool.Client.Components.Editing

@using Skinnix.RhymeTool.ComponentModel
@using Skinnix.RhymeTool.Data
@using Skinnix.RhymeTool.Data.Notation
@using Skinnix.RhymeTool.Data.Notation.Display

@inject IJSRuntime js

<div class="chord-sheet chord-sheet-editor chord-sheet-editing @(IsDebug ? "debug" : null)" contenteditable @ref="editorWrapper" spellcheck="false">
    @if (Document != null)
    {
        <CascadingValue TValue="ISheetEditorFormatter" Value="Formatter">
            <CascadingValue TValue="SheetDocument" Value="Document">

                @foreach (var line in Document.Lines)
                {
                    <SheetEditorLine Line="line" @key="line" @ref="lineEditorsSetter" />
                }

            </CascadingValue>
        </CascadingValue>
    }
</div>

@code {
    private static readonly bool IsDebug =
#if DEBUG
        true;
#else
        false;
#endif

    [Parameter] public SheetDocument? Document { get; set; }
    [Parameter] public ISheetEditorFormatter? Formatter { get; set; }

    private SheetDocument? loadedDocument;

    private ElementReference editorWrapper;

    private readonly WeakDictionary<Guid, SheetEditorLine> lineEditors = new();
    private SheetEditorLine lineEditorsSetter
    {
        set
        {
            if (value.Line != null)
                lineEditors[value.Line.Guid] = value;
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Document != loadedDocument)
        {
            if (loadedDocument is not null)
                loadedDocument.Lines.Modified -= OnLinesModified;

            lineEditors.Clear();
            loadedDocument = Document;

            if (loadedDocument is not null)
                loadedDocument.Lines.Modified += OnLinesModified;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await js.InvokeVoidAsync("registerBeforeInput", editorWrapper, DotNetObjectReference.Create(this));
        }

        await js.InvokeVoidAsync("console.log", "rerender: " + this.GetType().Name);
    }

    private void OnLinesModified(object? sender, ModifiedEventArgs args)
    {
        StateHasChanged();
    }

    [JSInvokable("OnBeforeInput")]
    public async Task<JsMetalineEditResult> OnBeforeInput(InputEventData data)
    {
        var startEditor = lineEditors[data.Selection.Start.Metaline];
        if (data.Selection.End.Metaline != data.Selection.Start.Metaline)
            return new JsMetalineEditResult(false, null); //TODO: for now, we don't support multi-line selections

        var editResult = await startEditor.HandleInput(data);
        if (editResult == null)
            return new JsMetalineEditResult(false, null);

        var selection = editResult.NewSelection is null ? null
            : new JsMetalineSelectionRange(editResult.NewSelection.Metaline.Guid, editResult.NewSelection.LineId, editResult.NewSelection.LineIndex, editResult.NewSelection.Range);
        return new JsMetalineEditResult(editResult.Success, selection);
    }

    public record JsMetalineEditResult(bool Success, JsMetalineSelectionRange? Selection);
    public record JsMetalineSelectionRange(Guid Metaline, int? LineId, int? LineIndex, SimpleRange Range);
}