@namespace Skinnix.RhymeTool.Client.Components.Editing

@using Skinnix.RhymeTool.Client.Components.Rendering
@using Skinnix.RhymeTool.ComponentModel
@using Skinnix.RhymeTool.Data
@using Skinnix.RhymeTool.Data.Notation
@using Skinnix.RhymeTool.Data.Notation.Display
@using Skinnix.RhymeTool.Data.Notation.Display.Caching

@inject IJSRuntime js

@{
    void RenderNote(Note note, bool isBassNote = false)
    {
        var format = (isBassNote ? Formatter?.FormatBassNote(note) : Formatter?.FormatNote(note))
            ?? new(note.Type.GetDisplayName(), note.Accidental.GetDisplayName());
            
        if (!string.IsNullOrEmpty(format.Accidental))
        {
            @(format.Type)<span class="accidental" data-accidental="@format.Accidental"><span class="accidental-content">@format.Accidental</span></span>
        }
        else
        {
            @(format.Type)
        }
    }

    void RenderChordContent(Chord chord)
    {
        <span class="chord-root">@{ RenderNote(chord.Root); }</span><span class="chord-quality">@(Formatter?.Format(chord.Quality) ?? chord.Quality.ToString())</span>

        @if (chord.Alterations.Count > 0)
        {
            var i = 0;
            <span class="chord-alterations">
                @foreach (var alteration in chord.Alterations)
                {
                    var alterationFormat = Formatter?.FormatAlteration(alteration, i)
                        ?? new AlterationFormat(alteration.Type.ToString(), alteration.Degree.Value.ToString(), alteration.Degree.Modifier.ToString(), false);

                    if (i++ != 0)
                    {
                        <span class="chord-alteration-separator">/</span>
                    }

                    if (alterationFormat.ModifierAfter)
                    {
                        <span class="chord-alteration">@(alterationFormat.Type)@(alterationFormat.Degree)<span class="alteration-modifier" data-modifier="@(alterationFormat.Modifier)"><span class="alteration-modifier-content">@(alterationFormat.Modifier)</span></span></span>
                    }
                    else
                    {
                        <span class="chord-alteration">@(alterationFormat.Type)<span class="alteration-modifier" data-modifier="@(alterationFormat.Modifier)"><span class="alteration-modifier-content">@(alterationFormat.Modifier)</span></span>@(alterationFormat.Degree)</span>
                    }
                }
            </span>
        }

        @if (chord.Bass != null)
        {
            <span class="chord-bass-separator">/</span>

            <span class="chord-bass">@{ RenderNote(chord.Bass.Value, true); }</span>
        }
        
        <span class="drag-handle" draggable="true" style="--content: '@chord.ToString(Formatter)';" ondragstart="chordStartDrag(event)"></span>
    }

    void RenderSpan(SheetDisplayLineElement element)
    {
        string? elementString = null;
        <span @key="GetKey(element)" class="@SheetRenderer.GetElementClasses(element)">@if (element is SheetDisplayLineChord chord)
            {
                RenderChordContent(chord.Chord);
            }
            else
            {
                @(elementString = element.ToString(Formatter))
            }@if (element.Tags.Contains(SheetDisplayTag.Attachment))
            {
                <span class="drag-handle" draggable="true" style="--content: '@(elementString ??= element.ToString(Formatter))';" ondragstart="attachmentStartDrag(event)"></span>
            }</span>
    }

    void RenderElement(SheetDisplayLineElement element)
    {
        switch (element)
        {
            case SheetDisplayLineBreakPoint breakpoint:
                //Keine Breakpoints im Editor
                break;

            case SheetDisplayLineSegmentTitleBracket titleBracket when titleBracket.IsTitleStart:
                <span class="scroll-anchor" id="sheetSegment-@(Line.Guid)"></span><span @key="GetKey(element)" class="@SheetRenderer.GetElementClasses(element)">@titleBracket.ToString(Formatter)</span>
                break;

            default:
                RenderSpan(element);
                break;
        }
    }

    void RenderElements(IEnumerable<SheetDisplayLineElement> elements)
    {
        foreach (var element in elements)
            RenderElement(element);
    }

    void RenderEmptyLine()
    {
        <br />
    }

    void RenderLine(SheetDisplayLine line)
    {
        switch (line)
        {
            case SheetDisplayEmptyLine empty:
                <div @key="GetKey(line)" class="line line-empty" data-line="@line.Id">@{RenderEmptyLine();}</div>
                break;

            case SheetDisplayChordLine chords:
                <div @key="GetKey(line)" class="line line-chords" data-line="@line.Id">@{RenderElements(line.GetElements());}</div>
                break;

            case SheetDisplayTextLine text:
                <div @key="GetKey(line)" class="line line-text" data-line="@line.Id">@{RenderElements(line.GetElements());}</div>
                break;

            case SheetDisplayTabLine tab:
                <div @key="GetKey(line)" class="line line-tab" data-line="@line.Id">@{RenderElements(line.GetElements());}</div>
                break;
        }
    }
}

@if (Line is not null)
{
    <span class="metaline" data-metaline="@Line.Guid" data-type="@Line.GetType()?.Name" data-render-key="@(renderKey++)" @attributes="GetAdditionalAttributes()">
        <span class="metaline-controls" contenteditable="false"><div class="metaline-bracket"></div>@*<MetalineTypeButton Line="Line" />*@</span><span class="metaline-lines">
            @foreach (var display in (renderedLines = Line.CreateDisplayLines(Formatter).ToArray()))
            {
                <span class="line-controls" contenteditable="false"><LineTypeButton Line="display" /></span>
                RenderLine(display);
            }
        </span>
    </span>
}

@code {
    [CascadingParameter] public SheetDocument? Document { get; set; }
    [CascadingParameter] public ISheetEditorFormatter? Formatter { get; set; }

    [Parameter] public SheetLine? Line { get; set; }

    [Parameter] public EventCallback<SheetDisplayLine[]> OnLinesRendered { get; set; }

    private SheetLine? loadedLine;
    private ISheetEditorFormatter? loadedFormatter;

    private SheetDisplayLine[]? renderedLines;

    private long renderKey = 1;

    private bool shouldRender;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Line != loadedLine)
        {
            shouldRender = true;

            if (loadedLine is not null)
                loadedLine.Modified -= OnLineModified;

            loadedLine = Line;

            if (loadedLine is not null)
                loadedLine.Modified += OnLineModified;
        }

        if (Formatter != loadedFormatter)
        {
            shouldRender = true;

            loadedFormatter = Formatter;
        }
    }

    protected override bool ShouldRender()
    {
        return shouldRender;
    }

    private new void StateHasChanged()
    {
        shouldRender = true;
        base.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        shouldRender = false;

        await base.OnAfterRenderAsync(firstRender);

        await OnLinesRendered.InvokeAsync(renderedLines);

        //await js.InvokeVoidAsync("notifyRenderFinished", this.GetType().Name);
    }

    private void OnLineModified(object? sender, ModifiedEventArgs args)
    {
        StateHasChanged();
    }

    public SheetDisplayLine? TryGetLine(int lineId)
    {
        if (Line is null || Document is null) throw new InvalidOperationException("Editor not initialized");

        //Finde die Zeile
        var lines = Line.CreateDisplayLines(Formatter);
        return lines.FirstOrDefault(l => l.Id == lineId);
    }

    private MetalineType GetEffectiveType(IReadOnlyList<SheetDisplayLine> displayLines)
    {
        if (displayLines.Count == 0)
            return MetalineType.Unknown;

        var type = MetalineType.Unknown;
        foreach (var display in displayLines)
        {
            switch (display)
            {
                case SheetDisplayChordLine:
                    type |= MetalineType.Chords;
                    break;
                case SheetDisplayTextLine:
                    type |= MetalineType.Text;
                    break;
            }
        }

        return type;
    }

    private IEnumerable<KeyValuePair<string, object?>> GetAdditionalAttributes()
    {
        if (Line is SheetTabLine)
            yield return new("data-selection", "box");
    }

    private object? GetKey(SheetDisplayLineElement element)
    {
        return null;
        return element.Slice;
    }

    private object? GetKey(SheetDisplayLine line)
    {
        return null;
        return line.Id;
    }

    private enum MetalineType
    {
        Unknown = 0,
        Text = 1,
        Chords = 2,
        TextAndChords = Text | Chords,
    }
}