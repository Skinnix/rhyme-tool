@namespace Skinnix.RhymeTool.Client.Components.Rendering

@using Skinnix.RhymeTool.ComponentModel
@using Skinnix.RhymeTool.Data.Notation
@using Skinnix.RhymeTool.Data.Notation.Display

@{
    void RenderNote(Note note, bool isBassNote = false)
    {
        var format = Formatter?.Format(note)
            ?? new(note.Type.GetDisplayName(), note.Accidental.GetDisplayName());

        if (!string.IsNullOrEmpty(format.Accidental))
        {
            @(format.Type)<span class="accidental" data-accidental="@format.Accidental"><span class="accidental-content">@format.Accidental</span></span>
        }
        else
        {
            @(format.Type)
        }
    }

    void RenderChord(Chord chord)
    {
        <span class="chord-root">@{ RenderNote(chord.Root); }</span><span class="chord-quality">@(Formatter?.ToString(chord.Quality) ?? chord.Quality.ToString())</span>

        @if (chord.Alterations.Count > 0)
        {
            var i = 0;
            <span class="chord-alterations">
                @foreach (var alteration in chord.Alterations)
                {
                    var alterationFormat = Formatter?.Format(alteration, i)
                        ?? new AlterationFormat(alteration.Type.ToString(), alteration.Degree.Value.ToString(), alteration.Degree.Modifier.ToString(), false);

                    if (i++ != 0)
                    {
                        <span class="chord-alteration-separator">/</span>
                    }

                    if (string.IsNullOrEmpty(alterationFormat.Modifier))
                    {
                        <span class="chord-alteration">@(alterationFormat.Type)@(alterationFormat.Degree)</span>
                    }
                    else if (alterationFormat.ModifierAfter)
                    {
                        <span class="chord-alteration">@(alterationFormat.Type)@(alterationFormat.Degree)<span class="alteration-modifier" data-modifier="@(alterationFormat.Modifier)"><span class="alteration-modifier-content">@(alterationFormat.Modifier)</span></span></span>
                    }
                    else
                    {
                        <span class="chord-alteration">@(alterationFormat.Type)<span class="alteration-modifier" data-modifier="@(alterationFormat.Modifier)"><span class="alteration-modifier-content">@(alterationFormat.Modifier)</span></span>@(alterationFormat.Degree)</span>
                    }
                }
            </span>
        }

        @if (chord.Bass != null)
        {
            <span class="chord-bass-separator">/</span><span class="chord-bass">@{ RenderNote(chord.Bass.Value, true); }</span>
        }
    }

    void RenderRhythmPattern(RhythmPattern rhythm)
    {
        var format = rhythm.Format(Formatter);

        <span class="rhythm-pattern-delimiter">@format.LeftDelimiter</span>

        var isFirst = true;
        @foreach (var bar in format.Bars)
        {
            if (isFirst)
            {
                isFirst = false;
            }
            else
            {
                <span class="rhythm-pattern-delimiter">@format.MiddleDelimiter</span>
            }

            foreach (var stroke in bar.Strokes)
            {
                var strokeLength = stroke.Length?.ToString() ?? " ";
                var strokeNote = stroke.NoteLength?.ToString(Formatter) ?? " ";

                <span class="rhythm-pattern-stroke" data-stroke="@stroke.Type">@stroke.Stroke<span class="stroke-length" style="--stroke-length: '@strokeLength';"></span><span class="stroke-note" style="--note-content: '@strokeNote'"></span></span>
                @*<span class="rhythm-pattern-stroke" data-stroke="@stroke.Type"><span class="stroke-note" style="--note-content: '@(stroke.NoteLength?.ToString(Formatter) ?? " ")'"></span>@stroke.Stroke<span class="stroke-length" style="--stroke-length: '@(stroke.Length?.ToString() ?? " ")'"></span></span>*@
            }
        }

        <span class="rhythm-pattern-delimiter">@format.RightDelimiter</span>
    }

    void RenderTabElement(SheetDisplayLineWidthElement element)
    {
        var format = element.Format(Formatter);

        var style = format.Width == 1 && format.Prefix is null && format.Suffix is null ? null
            : (format.Width == 1 ? null : $"--tab-width: {format.Width};--tab-padding: {format.Width - format.TotalTextLength};")
            + (format.Prefix is null ? null : $"--tab-prefix: '{format.Prefix}';--tab-prefix-length: {format.Prefix.Length};")
            + (format.Suffix is null ? null : $"--tab-suffix: '{format.Suffix}';--tab-suffix-length: {format.Suffix.Length};");

        <span @key="element.Slice" class="@GetElementClasses(element)" style="@style" @attributes="GetElementAttributes(element)">@format.Text</span>
    }

    void RenderElement(SheetLineContext lineContext, SheetDisplayLineElement element)
    {
        switch (element)
        {
            case SheetDisplayLineChord chord:
                <span @key="element.Slice" class="@GetElementClasses(element)" @attributes="GetElementAttributes(element)">@{ RenderChord(chord.Chord); }</span>
                break;

            case SheetDisplayLineRhythmPattern rhythm:
                <span @key="element.Slice" class="@GetElementClasses(element)" @attributes="GetElementAttributes(element)">@{ RenderRhythmPattern(rhythm.Rhythm); }</span>
                break;

            case SheetDisplayLineWidthElement tabElement:
                RenderTabElement(tabElement);
                break;

            case SheetDisplayLineSegmentTitleBracket titleBracket when titleBracket.IsTitleStart:
                <span class="scroll-anchor" id="sheetSegment-@(lineContext.Line.Guid)"></span><span @key="titleBracket.Slice" class="@SheetRenderer.GetElementClasses(element)">@titleBracket.ToString(Formatter)</span>
                break;

            case SheetDisplayLineBreakPoint breakpoint:
                <span class="@GetElementClasses(element)" @attributes="GetElementAttributes(element)" data-breakpoint-index="@breakpoint.BreakPointIndex" data-breakpoint-offset="@breakpoint.StartingPointOffset"></span>
                break;
                
            // case SheetDisplayLineTabBarLine barLine:
            //     <span @key="GetKey(element)" class="@SheetRenderer.GetElementClasses(barLine)"><span class="bar-line-content">@element.ToString()</span></span>
            //     break;

            default:
                <span @key="element.Slice" class="@GetElementClasses(element)">@element.ToString(Formatter)</span>
                break;
        }
    }

    void RenderElements(SheetLineContext lineContext, IEnumerable<SheetDisplayLineElement> elements)
    {
        foreach (var element in elements)
            RenderElement(lineContext, element);
    }

    void RenderLine(SheetLineContext lineContext, SheetDisplayLine display, IEnumerable<SheetDisplayLineElement> elements, int blockIndex, int indentation)
    {
        switch (display)
        {
            case SheetDisplayEmptyLine empty:
                <div class="line line-empty@(blockIndex != 0 ? " continuation" : null)" data-block-index="@blockIndex" style="--line-indentation: @(indentation)"></div>
                break;

            case SheetDisplayChordLine chords:
                <div class="line line-chords@(blockIndex != 0 ? " continuation" : null)" data-block-index="@blockIndex" style="--line-indentation: @(indentation)">@{ RenderElements(lineContext, elements); }</div>
                break;

            case SheetDisplayTextLine text:
                <div class="line line-text@(blockIndex != 0 ? " continuation" : null)" data-block-index="@blockIndex" style="--line-indentation: @(indentation)">@{ RenderElements(lineContext, elements); }</div>
                break;

            case SheetDisplayTabLine tab:
                <div class="line line-tab@(blockIndex != 0 ? " continuation" : null)" data-block-index="@blockIndex" style="--line-indentation: @(indentation)">@{ RenderElements(lineContext, elements); }</div>
                break;
        }
    }
}

<div class="chord-sheet">
    @if (Document != null)
    {
        @if (DisplayMode == SheetDisplayMode.Lines)
        {
            @foreach (var lineContext in Document.Lines.GetLinesWithContext())
            {
                <div class="metaline">
                    <div class="metaline-lines">
                        @if (BreakWidth is null)
                        {
                            @foreach (var display in lineContext.CreateDisplayLines(Formatter))
                            {
                                RenderLine(lineContext, display, display.GetElements(), 0, 0);
                            }   
                        }
                        else
                        {
                            var blockIndex = 0;
                            IEnumerable<int> indentations = Formatter?.GetLineIndentations().ToArray() ?? [0, 2];
                            var indentationEnumerator = indentations.GetEnumerator();
                            var indentation = indentationEnumerator.MoveNext() ? indentationEnumerator.Current : 0;
                            @foreach (var block in SheetBlock.Create(lineContext.CreateDisplayLines(Formatter).ToArray(), indentations.Select(i => BreakWidth.Value - i)))
                            {
                                foreach (var blockLine in block.Lines)
                                {
                                    RenderLine(lineContext, blockLine.Line, blockLine.GetElements(), blockIndex, indentation);
                                }

                                if (indentationEnumerator?.MoveNext() == true)
                                    indentation = indentationEnumerator.Current;
                                else
                                    indentationEnumerator = null;

                                blockIndex++;
                            }
                        }
                    </div>
                </div>
            }
        }
    }
</div>

@code {
    [Parameter] public SheetDocument? Document { get; set; }
    [Parameter] public SheetDisplayMode DisplayMode { get; set; }
    [Parameter] public ISheetEditorFormatter? Formatter { get; set; }
    [Parameter] public int? BreakWidth { get; set; }

    private SheetDocument? loadedDocument;

    private bool shouldRender;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Document != loadedDocument)
        {
            shouldRender = true;

            if (loadedDocument is not null)
                loadedDocument.Lines.Modified -= OnLinesModified;

            loadedDocument = Document;

            if (loadedDocument is not null)
                loadedDocument.Lines.Modified += OnLinesModified;
        }

        shouldRender = true;
    }

    protected override bool ShouldRender() => shouldRender;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        shouldRender = false;
    }

    private void OnLinesModified(object? sender, ModifiedEventArgs args)
    {
        StateHasChanged();
    }

    private new void StateHasChanged()
    {
        shouldRender = true;
        base.StateHasChanged();
    }

    public static string? GetElementClasses(SheetDisplayLineElement element)
    {
        var classes = GetElementBaseClass(element);
        if (element.Tags.Contains(SheetDisplayTag.Attachment))
            classes += " attachment";

        return classes;
    }

    public static IEnumerable<KeyValuePair<string, object?>> GetElementAttributes(SheetDisplayLineElement element)
    {
        /*var styles = string.Join("; ", GetElementStyles(element));
        if (styles.Length > 0)
            yield return new KeyValuePair<string, object?>("style", styles);*/
        return [];
    }

    private static IEnumerable<string> GetElementStyles(SheetDisplayLineElement element)
    {
        // if (element is SheetDisplayLineTabNoteBase tabNote)
        // {
        //     if (tabNote.Width != 1)
        //         yield return $"--tab-note-width: {tabNote.Width}";

        //     if (tabNote.)
        // }
        return [];
    }

    public static string? GetElementBaseClass(SheetDisplayLineElement element)
        => element switch
    {
        SheetDisplayLineFormatSpace or SheetDisplayTabLineFormatSpace => "format-space",
        SheetDisplayLineSpace => "space",

        SheetDisplayLineChord => "chord",
        SheetDisplayLineFingering => "fingering",
        SheetDisplayLineRhythmPattern => "rhythm-pattern",

        SheetDisplayLineText => "text",
        SheetDisplayLineAnchorText => "anchor-text",

        SheetDisplayLineSegmentTitleBracket => "segment-title-bracket",
        SheetDisplayLineSegmentTitleText => "segment-title",

        SheetDisplayLineTabTuning => "tab-tuning-note",
        SheetDisplayLineTabNote => "tab-note",
        SheetDisplayLineTabBarLine => "bar-line",

        SheetDisplayLineHyphen => "hyphen",
        SheetDisplayLineBreakPoint => "breakpoint",

        _ => null
    };
}