@namespace Skinnix.RhymeTool.Client.Components.Rendering

@using Skinnix.RhymeTool.ComponentModel
@using Skinnix.RhymeTool.Data.Notation
@using Skinnix.RhymeTool.Data.Notation.Display

@{
    void RenderNote(Note note, bool isBassNote = false)
    {
        var format = (isBassNote ? Formatter?.FormatBassNote(note) : Formatter?.FormatNote(note))
            ?? (note.Accidental == AccidentalType.None ? new(note.Type.GetDisplayName())
            : new(note.Type.GetDisplayName(), note.Accidental.GetDisplayName()));

        @(format.Type)<span class="accidental">@format.Accidental</span>
    }

    void RenderChordContent(Chord chord)
    {
        <span class="chord-root">@{ RenderNote(chord.Root); }</span><span class="chord-quality">@chord.Quality.ToString(Formatter)</span>

        @if (chord.Alterations.Count > 0)
        {
            var firstAlteration = true;
            <span class="chord-alterations">
                @foreach (var alteration in chord.Alterations)
                {
                    if (!firstAlteration)
                    {
                        <span class="chord-alteration-separator">/</span>
                    }
                    firstAlteration = false;

                    <span class="chord-alteration">@alteration.ToString(Formatter)</span>
                }
            </span>
        }

        @if (chord.Bass != null)
        {
            <span class="chord-bass-separator">/</span><span class="chord-bass">@{ RenderNote(chord.Bass.Value, true); }</span>
        }
    }

    void RenderElement(SheetLine line, SheetDisplayLineElement element)
    {
        switch (element)
        {
            case SheetDisplayLineChord chord:
                <span @key="chord" class="@GetElementClasses(element)">@{ RenderChordContent(chord.Chord); }</span>
                break;

            case SheetDisplayLineSegmentTitleBracket titleBracket when titleBracket.IsTitleStart:
                <span class="scroll-anchor" id="sheetSegment-@(line.Guid)"></span><span @key="titleBracket" class="@SheetRenderer.GetElementClasses(element)">@titleBracket.ToString(Formatter)</span>
                break;

            case SheetDisplayLineBreakPoint breakpoint:
                <span @key="breakpoint" class="@GetElementClasses(element)" data-breakpoint-index="@breakpoint.BreakPointIndex" data-breakpoint-offset="@breakpoint.StartingPointOffset"></span>
                break;

            default:
                <span @key="element" class="@GetElementClasses(element)">@element.ToString(Formatter)</span>
                break;
        }
    }

    void RenderElements(SheetLine line, IEnumerable<SheetDisplayLineElement> elements)
    {
        foreach (var element in elements)
            RenderElement(line, element);
    }

    void RenderLine(SheetLine line, SheetDisplayLine display, IEnumerable<SheetDisplayLineElement> elements, int blockIndex, int indentation)
    {
        switch (display)
        {
            case SheetDisplayEmptyLine empty:
                <div class="line line-empty@(blockIndex != 0 ? " continuation" : null)" data-block-index="@blockIndex" style="--line-indentation: @(indentation)"></div>
                break;

            case SheetDisplayChordLine chords:
                <div class="line line-chords@(blockIndex != 0 ? " continuation" : null)" data-block-index="@blockIndex" style="--line-indentation: @(indentation)">@{ RenderElements(line, elements); }</div>
                break;

            case SheetDisplayTextLine text:
                <div class="line line-text@(blockIndex != 0 ? " continuation" : null)" data-block-index="@blockIndex" style="--line-indentation: @(indentation)">@{ RenderElements(line, elements); }</div>
                break;
        }
    }
}

<div class="chord-sheet">
    @if (Document != null)
    {
        @if (DisplayMode == SheetDisplayMode.Lines)
        {
            @foreach (var line in Document.Lines)
            {
                <div class="metaline">
                    <div class="metaline-lines">
                        @if (BreakWidth is null)
                        {
                            @foreach (var display in line.CreateDisplayLines(Formatter))
                            {
                                RenderLine(line, display, display.GetElements(), 0, 0);
                            }   
                        }
                        else
                        {
                            var blockIndex = 0;
                            IEnumerable<int> indentations = Formatter?.GetLineIndentations().ToArray() ?? [0, 2];
                            var indentationEnumerator = indentations.GetEnumerator();
                            var indentation = indentationEnumerator.MoveNext() ? indentationEnumerator.Current : 0;
                            @foreach (var block in SheetBlock.Create(line.CreateDisplayLines(Formatter).ToArray(), indentations.Select(i => BreakWidth.Value - i)))
                            {
                                foreach (var blockLine in block.Lines)
                                {
                                    RenderLine(line, blockLine.Line, blockLine.GetElements(), blockIndex, indentation);
                                }

                                if (indentationEnumerator?.MoveNext() == true)
                                    indentation = indentationEnumerator.Current;
                                else
                                    indentationEnumerator = null;

                                blockIndex++;
                            }
                        }
                    </div>
                </div>
            }
        }
    }
</div>

@code {
    [Parameter] public SheetDocument? Document { get; set; }
    [Parameter] public SheetDisplayMode DisplayMode { get; set; }
    [Parameter] public ISheetEditorFormatter? Formatter { get; set; }
    [Parameter] public int? BreakWidth { get; set; }

    private SheetDocument? loadedDocument;

    private bool shouldRender;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Document != loadedDocument)
        {
            shouldRender = true;

            if (loadedDocument is not null)
                loadedDocument.Lines.Modified -= OnLinesModified;

            loadedDocument = Document;

            if (loadedDocument is not null)
                loadedDocument.Lines.Modified += OnLinesModified;
        }

        shouldRender = true;
    }

    protected override bool ShouldRender() => shouldRender;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        shouldRender = false;
    }

    private void OnLinesModified(object? sender, ModifiedEventArgs args)
    {
        StateHasChanged();
    }

    private new void StateHasChanged()
    {
        shouldRender = true;
        base.StateHasChanged();
    }

    public static string? GetElementClasses(SheetDisplayLineElement element)
    {
        var classes = GetElementBaseClass(element);
        if (element.Tags.Contains(SheetDisplayTag.Attachment))
            classes += " attachment";

        return classes;
    }

    public static string? GetElementBaseClass(SheetDisplayLineElement element)
        => element switch
    {
        SheetDisplayLineFormatSpace => "format-space",
        SheetDisplayLineSpace => "space",
        SheetDisplayLineChord => "chord",
        SheetDisplayLineFingering => "fingering",
        SheetDisplayLineText => "text",
        SheetDisplayLineAnchorText => "anchor-text",
        SheetDisplayLineSegmentTitleBracket => "segment-title-bracket",
        SheetDisplayLineSegmentTitleText => "segment-title",
        SheetDisplayLineHyphen => "hyphen",
        SheetDisplayLineBreakPoint => "breakpoint",
        _ => null
    };
}