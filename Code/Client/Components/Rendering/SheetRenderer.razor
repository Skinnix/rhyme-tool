@namespace Skinnix.RhymeTool.Client.Components.Rendering

@using Skinnix.RhymeTool.Data.Notation
@using Skinnix.RhymeTool.Data.Notation.Display

@{
    void RenderChord(Chord chord)
    {
        <span class="element element-chord chord">
            <span class="chord-root">@chord.Root.ToString(Formatter)</span><span class="chord-quality">@chord.Quality.ToString(Formatter)</span>

            @if (chord.Alterations.Count > 0)
            {
                var firstAlteration = true;
                <span class="chord-alterations">
                    @foreach (var alteration in chord.Alterations)
                    {
                        if (!firstAlteration)
                        {
                            <span class="chord-alteration-separator">/</span>
                        }
                        firstAlteration = false;

                        <span class="chord-alteration">@alteration.ToString(Formatter)</span>
                    }
                </span>
            }

            @if (chord.Bass != null)
            {
                <span class="chord-bass-separator">/</span><span class="chord-bass">@(Formatter?.FormatBass(chord.Bass.Value) ?? chord.Bass.Value.ToString())</span>
            }
        </span>
    }

    void RenderElement(SheetLine line, SheetDisplayLineElement element)
    {
        switch (element)
        {
            case SheetDisplayLineChord chord:
                RenderChord(chord.Chord);
                break;

            case SheetDisplayLineSpace space:
                @("".PadRight(space.GetLength(Formatter)))
                break;

            case SheetDisplayLineText text:
                <span class="text">@text.ToString(Formatter)</span>
                break;

            case SheetDisplayLineAnchorText anchorText:
                <span class="anchor-text">@anchorText.ToString(Formatter)</span>
                break;

            case SheetDisplayLineSegmentTitleBracket titleBracket:
                <span class="segment-title-bracket">@titleBracket.ToString(Formatter)</span>
                break;

            case SheetDisplayLineSegmentTitleText titleText:
                <span class="segment-title" id="sheetSegment-@(line.Guid)">@titleText.ToString(Formatter)</span>
                break;
        }
    }

    void RenderElements(SheetLine line, IEnumerable<SheetDisplayLineElement> elements)
    {
        foreach (var element in elements)
            RenderElement(line, element);
    }

    void RenderLine(SheetLine line, SheetDisplayLine display)
    {
        switch (display)
        {
            case SheetDisplayEmptyLine empty:
                <pre class="line line-empty"></pre>
                break;

            case SheetDisplayChordLine chords:
                <pre class="line line-chords">@{ RenderElements(line, display.GetElements()); }</pre>
                break;

            case SheetDisplayTextLine text:
                <pre class="line line-text">@{ RenderElements(line, display.GetElements()); }</pre>
                break;
        }
    }
}

<div class="chord-sheet">
    @if (Document != null)
    {
        @if (DisplayMode == SheetDisplayMode.Lines)
        {
            @foreach (var line in Document.Lines)
            {
                <div class="metaline metaline-lines">
                    @foreach (var display in line.CreateDisplayLines(Formatter))
                    {
                        RenderLine(line, display);
                    }
                </div>
            }
        }
    }
</div>

@code {
    [Parameter] public SheetDocument? Document { get; set; }
    [Parameter] public SheetDisplayMode DisplayMode { get; set; }
    [Parameter] public ISheetBuilderFormatter? Formatter { get; set; }
}