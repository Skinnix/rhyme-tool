@using Skinnix.RhymeTool.Client.Services.Files

@implements IComparer<IFileListItem>

@{
    void DisplaySortByIcon(SortProperty property)
    {
        if (sortBy == property)
        {
            if (sortByDescending)
            {
                <i class="fa-solid fa-arrow-up-z-a"></i>
            }
            else
            {
                <i class="fa-solid fa-arrow-down-a-z"></i>
            }
        }
    }
}

<div class="d-flex explorer-header">
    <nav class="flex-fill me-auto" aria-label="breadcrumb">
        <ol class="breadcrumb">
            @if (currentDirectory is null)
            {
                <li class="breadcrumb-item active" aria-current="directory">
                    <i class="fa-regular fa-folder-open"></i>
                </li>
            }
            else
            {
                <li class="breadcrumb-item" aria-current="directory">
                    <a href="javascript:void(0)" @onclick="() => OpenDirectory(null)">
                        <i class="fa-regular fa-folder-open"></i>
                    </a>
                </li>

                //Lese aktuellen Pfad rückwärts
                var directories = new List<IFileListDirectory>();
                for (var directory = currentDirectory; directory is not null; directory = directory.ParentDirectory)
                {
                    directories.Insert(0, directory);
                }

                foreach (var directory in directories)
                {
                    if (directory == currentDirectory)
                    {
                        <li class="breadcrumb-item active" aria-current="directory">
                            @directory.Name
                        </li>
                    }
                    else
                    {
                        <li class="breadcrumb-item" aria-current="directory">
                            <a href="javascript:void(0)" @onclick="() => OpenDirectory(directory)">@directory.Name</a>
                        </li>
                    }
                }
            }
        </ol>
    </nav>

    <div class="dropdown">
        <button class="btn btn-sm btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="fa-solid fa-filter"></i>
        </button>
        <ul class="dropdown-menu">
            <li>
                <button class="dropdown-item@(filterBy == FilterProperty.TextFiles ? " active" : null)" href="javascript:void(0)"
                        @onclick="() => filterBy = FilterProperty.TextFiles">
                    Textdateien
                </button>
            </li>
            <li>
                <button class="dropdown-item@(filterBy == FilterProperty.AllFiles ? " active" : null)" href="javascript:void(0)"
                        @onclick="() => filterBy = FilterProperty.AllFiles">
                    Alle Dateien
                </button>
            </li>
        </ul>
    </div>
</div>

<div class="table-responsive fullscreen-fill overflow-y-auto">
    <table class="table table-hover explorer-table">
        <thead class="table-light">
            <tr>
                <th scope="col" @onclick="() => SortBy(SortProperty.Name)">
                    @{ DisplaySortByIcon(SortProperty.Name); } Name
                </th>
                <th scope="col" @onclick="() => SortBy(SortProperty.LastModified)">
                    @{ DisplaySortByIcon(SortProperty.LastModified); } Datum
                </th>
                <th scope="col" @onclick="() => SortBy(SortProperty.Size)">
                    @{ DisplaySortByIcon(SortProperty.Size); } Größe
                </th>
            </tr>
        </thead>
        <tbody>
            @if (currentDirectory is not null)
            {
                <tr class="clickable" @onclick="() => OpenDirectory(currentDirectory.ParentDirectory)">
                    <td>
                        <a href="javascript:void(0);" class="text-dark text-decoration-none" @onclick="() => OpenDirectory(currentDirectory.ParentDirectory)">
                            <i class="fa-solid fa-turn-up"></i> ..
                        </a>
                    </td>
                    <td></td>
                    <td></td>
                </tr>
            }

            @foreach (var item in currentItems.Order(this).Where(CheckFilter))
            {
                @if (item is IFileListDirectory directory)
                {
                    <tr @key="item" class="clickable" @onclick="() => OpenDirectory(directory)">
                        <td>
                            <a href="javascript:void(0);" class="text-dark text-decoration-none" @onclick="() => OpenDirectory(directory)">
                                <i class="fa-solid fa-folder"></i> @directory.Name
                            </a>
                        </td>
                        <td>@FormatLastModified(directory.LastModified)</td>
                        <td></td>
                    </tr>
                }
                else if (item is IFileListFile file)
                {
                    <tr @key="item" class="clickable" @onclick="() => OpenFile(file)">
                        <td>
                            <a href="javascript:void(0);" class="text-dark text-decoration-none" @onclick="() => OpenFile(file)">
                                <i class="fa-solid fa-file-lines"></i> @file.Name
                            </a>
                        </td>
                        <td>@FormatLastModified(item.LastModified)</td>
                        <td>@FormatFileSize(file.Size)</td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter] public IFileList? Files { get; set; }
    [Parameter] public EventCallback<IFileListFile> OnOpenFile { get; set; }

    private IFileList? currentFiles;
    private IFileListDirectory? currentDirectory;
    private IReadOnlyList<IFileListItem> currentItems = [];

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        //Dateiliste geändert?
        if (currentFiles != Files)
        {
            //Keine Dateiliste?
            if (Files is null)
            {
                currentFiles = null;
                currentDirectory = null;
                currentItems = [];
                return;
            }

            //Speichere Dateiliste
            currentFiles = Files;
            currentDirectory = null;

            //Lade Dateien
            await LoadCurrentFiles();
        }
    }

    private async Task LoadCurrentFiles()
    {
        if (Files is null)
        {
            currentItems = [];
            return;
        }

        //Lade Dateien und aktualisiere die Oberfläche
        currentItems = await ((IFileListItemParent?)currentDirectory ?? Files).GetItemsAsync();
        StateHasChanged();
    }

    private async Task OpenDirectory(IFileListDirectory? directory)
    {
        currentDirectory = directory;
        await LoadCurrentFiles();
    }

    private async Task OpenFile(IFileListFile file)
    {
        await OnOpenFile.InvokeAsync(file);
    }

    private string? FormatFileSize(long? size)
    {
        if (size is null)
            return null;

        var suffixes = new[] { "B", "KB", "MB", "GB", "TB" };
        var currentSize = size.Value;
        foreach (var suffix in suffixes)
        {
            if (currentSize < 1024)
                return $"{currentSize} {suffix}";

            currentSize >>= 10;
        }

        return $"{currentSize} PB";
    }

    private string? FormatLastModified(DateTime? lastModified)
    {
        if (lastModified is null)
            return null;

        if (lastModified.Value.Date == DateTime.Now.Date)
            return lastModified.Value.ToString("t");

        return lastModified.Value.ToString("d");
    }

    #region Sort/Filter
    private SortProperty sortBy = SortProperty.Name;
    private bool sortByDescending = false;

    private FilterProperty filterBy = FilterProperty.TextFiles;

    private enum SortProperty
    {
        Name,
        LastModified,
        Size,
    }

    private enum FilterProperty
    {
        TextFiles,
        AllFiles,
    }

    void SortBy(SortProperty property)
    {
        if (sortBy == property)
        {
            sortByDescending = !sortByDescending;
            StateHasChanged();
        }
        else
        {
            sortBy = property;
            sortByDescending = false;
            StateHasChanged();
        }
    }

    public int Compare(IFileListItem? x, IFileListItem? y)
    {
        if (x is null)
            return y is null ? 0 : -1;
        else if (y is null)
            return 1;

        if (x is IFileListDirectory && y is not IFileListDirectory)
            return -1;
        else if (x is not IFileListDirectory && y is IFileListDirectory)
            return 1;

        switch (sortBy)
        {
            case SortProperty.Name:
                return CompareByReference(x.Name, y.Name, sortByDescending);
            case SortProperty.LastModified:
                return CompareByValue(x.LastModified, y.LastModified, sortByDescending);
            case SortProperty.Size:
                return CompareByValue((x as IFileListFile)?.Size, (y as IFileListFile)?.Size, sortByDescending);
            default:
                return 0;
        }
    }

    private static int CompareByReference<T>(T? x, T? y, bool invert)
        where T : class, IComparable<T>
    {
        if (invert)
            return -CompareByReference(x, y, false);

        if (x is null)
            return y is null ? 0 : -1;
        else if (y is null)
            return 1;

        return x.CompareTo(y);
    }

    private static int CompareByValue<T>(T? x, T? y, bool invert)
        where T : struct, IComparable<T>
    {
        if (invert)
            return -CompareByValue(x, y, false);

        if (x is null)
            return y is null ? 0 : -1;
        else if (y is null)
            return 1;

        return x.Value.CompareTo(y.Value);
    }

    private bool CheckFilter(IFileListItem item)
    {
        if (item is IFileListDirectory)
            return true;

        if (filterBy == FilterProperty.TextFiles)
            return item is IFileListFile file && file.Name.EndsWith(".txt", StringComparison.OrdinalIgnoreCase);

        return true;
    }
    #endregion
}
