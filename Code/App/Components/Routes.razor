@using Skinnix.RhymeTool.Client
@using Skinnix.RhymeTool.Client.Pages
@using Skinnix.RhymeTool.Client.Services
@using Skinnix.RhymeTool.MauiBlazor.Intents

@inject IDocumentService documentService
@inject NavigationManager navigation
@inject IJSRuntime js

<ErrorBoundary @ref="errorBoundary">
    <ChildContent>
        <Router AppAssembly="@typeof(ClientStartup).Assembly">
            <Found Context="routeData">
                @if (!hideContent)
                {
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(Skinnix.RhymeTool.Client.Shared.SimpleLayout)" />
                    <FocusOnNavigate RouteData="@routeData" Selector="h1" />
                }
            </Found>
        </Router>
    </ChildContent>

    <ErrorContent>
        <div class="modal-backdrop show"></div>
        <div class="modal modal-xl show d-block" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title"><i class="fa-solid fa-triangle-exclamation text-danger"></i> Ein Fehler ist aufgetreten</h5>
                        @* <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button> *@
                    </div>
                    <div class="modal-body">
                        <p style="white-space: pre-wrap">@context</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="ReloadAfterError">
                            Neu Laden
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </ErrorContent>
</ErrorBoundary>

@code {
    private ErrorBoundary? errorBoundary;
    private bool hideContent = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        hideContent = false;

        navigation.LocationChanged -= OnLocationChanged;
        navigation.LocationChanged += OnLocationChanged;

        //Gibt es einen Intent?
        var launchIntent = MauiProgram.LaunchIntent;
        if (launchIntent?.KeepIntent == false)
            MauiProgram.LaunchIntent = null;

        switch (launchIntent)
        {
            case OpenFileIntent openFileIntent:
                hideContent = true;
                StateHasChanged();
                var document = await documentService.LoadFile(openFileIntent.File)
                    ?? throw new FileNotFoundException("Datei konnte nicht gelesen werden.", "Dateifehler");

                documentService.SetCurrentDocument(document);
                var url = Document.GetUrl(document);
                navigation.NavigateTo(url);
                break;
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        await js.InvokeVoidAsync("hideAllOffcanvases");

        if (hideContent)
        {
            hideContent = false;
            StateHasChanged();
        }
    }

    private async Task ReloadAfterError()
    {
        errorBoundary?.Recover();
        hideContent = false;

        await js.InvokeVoidAsync("location.reload");
    }
}